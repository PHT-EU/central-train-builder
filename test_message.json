{
  "action": "generateHash",
  "token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6ImFkbWluIiwiaWF0IjoxNjAzMTA0OTExLCJleHAiOjE2MDU3ODMzMTF9.QOdX9KPNEYh7TRNxRDbtziYNRBEw74crydX5Vt875p5UYCBWnKnjhoIVGpHWyr8Xql1Dj-TPc78UJZn_qYmZ7m5x6FX_qwRWZBmia_4CUzM7eX7UJWwTsfQBwNGK5RFbd6b1tmXilTCaDzbDqPXiKg_NE_htFnHyhC2cXZjdopw",
  "data": {
    "type": "discovery",
    "train_id": "tb_hex_test_1",
    "user_id": 1,
    "user_public_key": "2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b4341514541304d742f447737795059486e33527848722f48360a376e4b66636b466d4262447a316e2f7a6b735970696d656f727a326a49484f30317344613333526369734c4431483955645172524a76517878613654744d586b0a636f63324d514c344150614e3939582b39797562464150677854397853484e676d306a4c54746a4c524e6878515573654b75454f524e38366e696e354446504f0a44516371517171324b71434a7349526b656145636f37673838652b3945434f6e48412f37457577767956344a777730346d772f667449442f66446f43555330710a41506a6d2b544e5a4373764a706c376949556678424d546e47566656372f4c4b48554478637975446a64357966524d6c433776414837476a6e55527170464f4e0a4e654653444162696358386576313332366d38383057646e72364f6b796d532b4f6c4d562f4334636a6a47374435755a4d6539516f4b4d64325472324b6d64390a50514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a",
    "user_signature": "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
    "route": [
      "aachen",
      "tuebingen",
      "leipzig"
    ],
    "master_image": "harbor.personalhealthtrain.de/pht_master/master:buster",
    "endpoint": {
      "name": "default",
      "command": "run",
      "files": [
        {
          "name": "entrypoint.py",
          "content": "#!/usr/bin/env python\n\nimport pickle\nimport requests\nimport xml.etree.ElementTree as ET\nfrom datetime import datetime\nimport threading\nfrom dotenv import load_dotenv, find_dotenv\nimport os\n\n\ndef get_avg_age(xml):\n    \"\"\"\n    Returns the average age of the patients in the xml tree given by the xml input.\n\n    :param xml:  xml file given as string\n    \"\"\"\n\n    try:\n        xml_root = ET.fromstring(xml)\n    except:\n        print('Could not parse the xml.')\n        return\n\n    # extract namespace\n    ns = xml_root.tag[:xml_root.tag.rfind('}')+1]\n\n    birthdates = xml_root.findall(f'.//{ns}birthDate')\n\n    if not birthdates:\n        print(\"Empty patient list\")\n\n    today = datetime.now()\n\n    def __get_age(date, now):\n        \"\"\"\n        Calculates the age in years from a given birthdate (date) and the time now (now)\n\n        :param date: birthdate as string (e.g.: '1919-11-01')\n        :param now: datetime object corresponding to the current time\n        :return: age in years\n        \"\"\"\n\n        birthdate = datetime.fromisoformat(date.get('value'))\n\n        return now.year - birthdate.year - ((now.month, now.day) < (birthdate.month, birthdate.day))\n    try:\n        avg = sum([__get_age(date, today) for date in birthdates]) / len(birthdates)\n\n    except Exception as e:\n        print('Error method: {}'.format(e))\n        avg = 0\n        pass\n\n    return avg\n\n\nclass Train:\n    def __init__(self,  results=None):\n        # Results encoded with Pickle\n        self.results = results\n\n    def _load_results(self):\n        try:\n            with open(self.results, 'rb') as results_file:\n                return pickle.load(file=results_file)\n        except:\n            return {'analysis': {}, 'discovery': {}}\n\n    def _save_results(self, results):\n        with open(self.results, 'wb') as results_file:\n            return pickle.dump(results, results_file)\n\n    def _load_patients(self):\n        load_dotenv(find_dotenv())\n        FHIR_ADDRESS = os.getenv(\"FHIR_ADDRESS\")\n\n        headers = {\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\",\n            \"Accept-Encoding\": \"gzip, deflate\",\n            \"Accept-Language\": \"de,en-US;q=0.7,en;q=0.3\",\n            \"Authorization\": \"Basic ZmhpcnVzZXI6Y2hhbmdlLXBhc3N3b3Jk\",\n            \"Connection\": \"keep-alive\",\n            \"Host\": FHIR_ADDRESS,\n            \"Upgrade-Insecure-Requests\": \"1\",\n            \"User-Agent\": \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\",\n        }\n        url = \"http://\" + FHIR_ADDRESS + \"/fhir-server/api/v4/Patient\"\n        return requests.get(url, headers=headers)\n\n    def run(self):\n        results = self._load_results()\n        local_res = 0\n\n        while local_res == 0:\n            fhir_data = self._load_patients()\n            xml = fhir_data.text\n            local_res = get_avg_age(xml)\n\n        results['discovery']['discovery_exec_' + str(len(results['discovery']) + 1)] = {'avg_age': local_res}\n        print(local_res)\n        self._save_results(results=results)\n        print(\"Results updated\")\n        exit(0)\n\n\ndef main():\n    train = Train(results='results.pkl')\n    train.run()\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
        }
      ]
    }
  }
}

